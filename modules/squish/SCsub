#!/usr/bin/env python

Import("env")
Import("env_modules")

env_squish = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_squish"]:
    thirdparty_dir = "#thirdparty/squish/"
    thirdparty_sources = [
        "alpha.cpp",
        "clusterfit.cpp",
        "colourblock.cpp",
        "colourfit.cpp",
        "colourset.cpp",
        "maths.cpp",
        "rangefit.cpp",
        "singlecolourfit.cpp",
        "squish.cpp",
    ]

    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

    env_squish.Prepend(CPPPATH=[thirdparty_dir])

    env_thirdparty = env_squish.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
    env.modules_sources += thirdparty_obj


else:
    squish_thirdparty_dir = env.get_precompiled_static_lib_path("libsquish")
    env_squish.Append(CPPPATH=[squish_thirdparty_dir + "include"])
    env.Append(LIBPATH=[squish_thirdparty_dir + "lib"])
    env.Append(LINKFLAGS= [
       "squish.lib",
    ])

# Godot source files

module_obj = []

env_squish.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
